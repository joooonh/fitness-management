<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UserMapper">

	<insert id="insertUser" parameterType="User">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select users_seq.nextval from dual
		</selectKey>
		insert into users
			(user_no, user_id, user_password, user_name, user_gender, user_birthday, user_email, 
			 user_photo, user_zipcode, user_basic_address, user_detail_address, user_tel)
		values
			(#{no}, #{id}, #{encryptPassword}, #{name}, #{gender}, #{birth}, #{email},
			 #{photo}, #{zipcode}, #{basicAddr}, #{detailAddr}, #{tel})
	</insert>
	
	<!--회원 출석등록 -->
	<insert id="insertUserAtt" parameterType="UserAttendance">
		insert into user_attendances
			( user_attendance_no, user_attendance_date , user_no, user_start_time)
		values
			(user_attendance_seq.nextval ,#{userAttDate}, #{userNo} , #{startTime})
	</insert>
	<!--프로그램 출석등록 -->
	<insert id="insertClassAtt" parameterType="UserClassAttendance">
		insert into user_class_attendances
			(user_class_attendance_no,user_no, program_no, class_attendance_date)
		values
			(user_class_attendance_seq.nextval ,#{userNo}, #{programNo}, #{classAttDate})
	</insert>
	
	<update id="updateUser" parameterType="User">
		update 
			users
		set
			user_password = #{encryptPassword},
			user_name = #{name},
			user_gender = #{gender},
			user_birthday = #{birth},
			user_email = #{email},
			user_photo = #{photo},
			user_zipcode = #{zipcode},
			user_basic_address = #{basicAddr},
			user_detail_address = #{detailAddr},
			user_tel = #{tel},
			user_deleted = #{deleted},
			user_updated_date = sysdate
		where
			user_id = #{id}
		
	</update>
	
	<select id="getTotalRows" resultType="int">
		select
			count(*)
		from
			users
		where
			user_deleted = 'N'
	</select>
	
	<select id="getAllUsers" resultType="User">
		select
			user_no 				as no, 
			user_id 				as id,
			user_password 			as encryptPassword,
			user_name 				as name,
			user_gender 			as gender,
			user_birthday			as birth,
			user_email				as email,
			user_photo				as photo,
			user_zipcode			as zipcode,
			user_basic_address		as basicAddr,
			user_detail_address		as detailAddr,
			user_tel				as tel,
			user_deleted			as deleted,
			user_created_date		as createdDate,
			user_updated_date		as updatedDate
		from
			users
		where
			user_deleted = 'N'
	</select>
	
	<select id="getUserById" parameterType="string" resultType="User">
		select
			user_no 				as no, 
			user_id 				as id,
			user_password 			as encryptPassword,
			user_name 				as name,
			user_gender 			as gender,
			user_birthday			as birth,
			user_email				as email,
			user_photo				as photo,
			user_zipcode			as zipcode,
			user_basic_address		as basicAddr,
			user_detail_address		as detailAddr,
			user_tel				as tel,
			user_deleted			as deleted,
			user_created_date		as createdDate,
			user_updated_date		as updatedDate
		from
			users
		where
			user_id = #{value}
			and user_deleted = 'N'
	</select>
	
	<select id="getUserByEmail" parameterType="string" resultType="User">
		select
			user_no 				as no, 
			user_id 				as id,
			user_password 			as encryptPassword,
			user_name 				as name,
			user_gender 			as gender,
			user_birthday			as birth,
			user_email				as email,
			user_photo				as photo,
			user_zipcode			as zipcode,
			user_basic_address		as basicAddr,
			user_detail_address		as detailAddr,
			user_tel				as tel,
			user_deleted			as deleted,
			user_created_date		as createdDate,
			user_updated_date		as updatedDate
		from
			users
		where
			user_email = #{value}
			and user_deleted = 'N'
	</select>
	

	<!-- 프로그램 요일과 프로그램명 조회 -->
	<select id="getProgramDays" parameterType="string" resultType="ProgramDetailDto">
		  select
		    A.program_no					 as programNo,
		    A.program_name					as programName,
		    A.program_start_date 			 as startDate,
		    A.program_end_date				as endDate,
		    A.program_end_hour				as endHour,
		    A.program_quota					as quota,
		    A.program_request_count			as requestCount,
		    A.program_status				as programStatus,
		    A.employee_id					as employeeId,
		    A.fitness_program_category_no 	as categoryNo,
		    B.program_open_day				as openDay
		from
		    fitness_programs A, fitness_program_days B
		
		where
		    A.program_no = B.program_no
		   and A.program_status = '신청중'
	</select>
	
	<!--프로그램 정보  -->
	<select id="getProgramByNo" parameterType="string" resultType="FitnessProgram">
		select
			program_no						as no,
			program_name					as name,
			program_start_date				as startDate,
			program_end_date				as endDate,
			program_start_hour				as startHour,
			program_end_hour				as endHour,
			program_quota					as quota,
			program_request_count			as requestCount,
			program_status					as status,
			program_created_date			as createdDate,
			program_updated_date 			as udpatedDate,
			employee_id						as employeeId,
			fitness_program_category_no	    as programCategoryNo
		from
			fitness_programs
		where
			program_no = #{value}
			and program_status = '신청중'
	
	</select>
	
	<!-- 출석 목록 조회 -->
	<select id="getUserList" parameterType="map" resultType="UserListAttDto">
		select
	                user_no 				    as userNo,
					user_id 				    as userId,
					user_name			    	as userName,
					user_gender					as userGender,
					user_email					as userEmail,
					user_tel				    as userTel,
					user_start_time				as StartTime,
					user_end_time	    		as EndTime,
                    user_attendance_date        as userAttDate,
					class_attendance_date		as classAttDate,
					program_no					as programNo,
	                membership_payment_status   as membership,
					program_name				as programName
		from        (
	                select 
		                row_number() over (order by user_no asc) row_numbers,
		                user_no,
		                user_id,
		                user_name,
		                user_gender,
		                user_email,
		                user_tel,
		                user_start_time,
		                user_end_time,
                        user_attendance_date,
		                class_attendance_date,
		                program_no, 
		                membership_payment_status,
		                program_name
		            from (
			                        select
			                            A.user_no,
			                            A.user_id,
			                            A.user_name,
			                            A.user_gender,
			                            A.user_email,
			                            A.user_tel,
			                            null as user_start_time,
			                            null as user_end_time,
	                                    C.class_attendance_date,
	                                    null as user_attendance_date,
			                            C.program_no,
			                            null as membership_payment_status,
			                            D.program_name		
			                        from 
			                            users A, user_class_attendances C , fitness_programs D 
			                        where
			                            A.user_no = C.user_no
			                            and C.program_no = D.program_no
			                            and C.class_attendance_date is not null
			                           <if test="opt != null and keyword != null">
									  		<choose>
									  		 	<when test="opt == 'userName' ">
									  		 		and A.user_name = #{keyword}
									  		 	</when>
									  		 	<when test="opt == 'userNo' ">
									  		 		and A.user_no = #{keyword}
									  		 	</when>
									  		 	<when test="opt == 'userTel'">
									  		 		and A.user_tel =  #{keyword}
									  		 	</when>
									  		 </choose> 
								  		</if>
								  		<if test="programInfo != null">
								  			and D.program_name = #{programInfo}
								  		</if>
			                            
			                            
			                union
			                        select
			                            A.user_no,
			                            A.user_id,
			                            A.user_name,
			                            A.user_gender,
			                            A.user_email,
			                            A.user_tel,
			                            B.user_start_time,
			                            B.user_end_time,
	                                    null as class_attendance_date,
			                            B.user_attendance_date,
			                            null,
			                            E.membership_payment_status,
			                            null
			                            
			                        from 
			                            users A, user_attendances B ,  membership_histories E
			                        where
			                            A.user_no = B.user_no
			                           
			                            and A.user_no = E.user_no
			                            and E.membership_payment_status = 'Y'
			                            and B.user_attendance_date is not null
			                           
			                             <if test="opt != null and keyword != null">
									  		<choose>
									  		 	<when test="opt == 'userName' ">
									  		 		and A.user_name = #{keyword}
									  		 	</when>
									  		 	<when test="opt == 'userNo' ">
									  		 		and A.user_no = #{keyword}
									  		 	</when>
									  		 	<when test="opt == 'userTel'">
									  		 		and A.user_tel =  #{keyword}
									  		 	</when>
									  		 </choose> 
								  		</if>
								  		<if test="programInfo != null">
								  			and D.program_name = #{programInfo}
								  		</if>
		            ))
		WHERE
	  		  row_numbers between #{begin} and #{end}
	</select>

	<!-- 페이징처리 -->
	<select id="getTotalRows" parameterType="map" resultType="int">
		select
			count(*)
		from
			users , fitness_programs
		where
			user_deleted = 'N'
			<if test="opt != null and keyword != null">
		  		<choose>
		  		 	<when test="opt == 'userName' ">
		  		 		and user_name = #{keyword}
		  		 	</when>
		  		 	<when test="opt == 'userNo' ">
		  		 		and user_no = #{keyword}
		  		 	</when>
		  		 	<when test="opt == 'userTel'">
		  		 		and user_tel =  #{keyword}
		  		 	</when>
		  		 </choose> 
	  		</if>
			
	</select>
	
	<!-- 로그램 조회 -->
	<select id="getPrograms" parameterType="map" resultType="FitnessProgramCategory">
		select
    		program_no as categoryNo,
    		program_name as categoryName
		from
   			 fitness_programs
	</select>
	
	

	<select id="getUserList" parameterType="map" resultType="UserListAttDto">
		select
				user_no 				    as userNo,
				user_id 				    as userId,
				user_name			    	as userName,
				user_gender					as userGender,
				user_birthday 				as userBirthday,
				user_email					as userEmail,
				user_tel				    as userTel,
				user_created_date		    as CreatedDate,
				user_updated_date 			as UpdatedDate,
				user_start_time				as StartTime,
				user_end_time	    		as EndTime,
				class_attendance_date		as classAttDate,
				program_no					as programNo,
				program_name				as programName
			
		from	(
			select
				row_number() over(order by A.user_no desc) row_numbers,
				A.user_no,
				A.user_id,
				A.user_name,
				A.user_gender,
				A.user_birthday,
				A.user_email,
				A.user_tel,
				A.user_created_date,
				A.user_updated_date,
				B.user_start_time,
				B.user_end_time,
				C.class_attendance_date,
				C.program_no,
				D.program_name		
			from 
				users A, user_attendances B, user_class_attendances C , fitness_programs D
			where
				A.user_no = B.user_no
				and A.user_no = B.user_no
				and C.program_no = D.program_no
				
			)
			
			where
				row_numbers between #{begin} and #{end}
	</select>
	
	<select id="getTotalRows" resultType="int">
		select
			count(*)
		from
			users
		where
			user_deleted = 'N'
	</select>
	
	<select id="getPrograms" parameterType="map" resultType="FitnessProgramCategory">
		select
    		fitness_program_category_no as categoryNo,
    		fitness_program_category_name as categoryName
		from
   			 fitness_program_category
	</select>
	

</mapper>