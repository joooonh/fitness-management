<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UserMapper">

	<!-- 모든 사용자 조회 -->
	<select id="getAllUsers" resultType="User">
		select
			user_no 				as no, 
			user_id 				as id,
			user_password 			as encryptPassword,
			user_name 				as name,
			user_gender 			as gender,
			user_birthday			as birth,
			user_email				as email,
			user_photo				as photo,
			user_zipcode			as zipcode,
			user_basic_address		as basicAddr,
			user_detail_address		as detailAddr,
			user_tel				as tel,
			user_deleted			as deleted,
			user_created_date		as createdDate,
			user_updated_date		as updatedDate,
			user_provider_type		as providerType
		from
			users
		where
			user_deleted = 'N'
	</select>
	
	<!-- 아이디로 사용자 조회 -->
	<select id="getUserById" parameterType="string" resultType="User">
		select
			user_no 				as no, 
			user_id 				as id,
			user_password 			as encryptPassword,
			user_name 				as name,
			user_gender 			as gender,
			user_birthday			as birth,
			user_email				as email,
			user_photo				as photo,
			user_zipcode			as zipcode,
			user_basic_address		as basicAddr,
			user_detail_address		as detailAddr,
			user_tel				as tel,
			user_deleted			as deleted,
			user_created_date		as createdDate,
			user_updated_date		as updatedDate,
			user_provider_type		as providerType
		from
			users
		where
			user_id = #{value}
			and user_deleted = 'N'
	</select>
	
	<!-- 이메일로 사용자 조회 -->
	<select id="getUserByEmail" parameterType="string" resultType="User">
		select
			user_no 				as no, 
			user_id 				as id,
			user_password 			as encryptPassword,
			user_name 				as name,
			user_gender 			as gender,
			user_birthday			as birth,
			user_email				as email,
			user_photo				as photo,
			user_zipcode			as zipcode,
			user_basic_address		as basicAddr,
			user_detail_address		as detailAddr,
			user_tel				as tel,
			user_deleted			as deleted,
			user_created_date		as createdDate,
			user_updated_date		as updatedDate,
			user_provider_type		as providerType
		from
			users
		where
			user_email = #{value}
			and user_deleted = 'N'
	</select>
	
	<!-- 사용자 추가 -->
	<insert id="insertUser" parameterType="User">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select users_seq.nextval from dual
		</selectKey>
		insert into users
			(user_no, user_id, user_password, user_name, user_gender, user_birthday, user_email, 
			 user_photo, user_zipcode, user_basic_address, user_detail_address, user_tel, user_provider_type)
		values
			(#{no}, #{id}, #{encryptPassword}, #{name}, #{gender}, #{birth}, #{email},
			 #{photo}, #{zipcode}, #{basicAddr}, #{detailAddr}, #{tel}, #{providerType})
	</insert>
	
	<!-- 사용자 정보 변경 -->	
	<update id="updateUser" parameterType="User">
		update 
			users
		set
			user_password = #{encryptPassword},
			user_name = #{name},
			user_gender = #{gender},
			user_birthday = #{birth},
			user_email = #{email},
			user_photo = #{photo},
			user_zipcode = #{zipcode},
			user_basic_address = #{basicAddr},
			user_detail_address = #{detailAddr},
			user_tel = #{tel},
			user_deleted = #{deleted},
			user_updated_date = sysdate,
			user_provider_type = #{providerType}
		where
			user_id = #{id}
	</update>

	
	<select id="getUserList" parameterType="map" resultType="UserListAttDto">
		select
				user_no 				    as userNo,
				user_id 				    as userId,
				user_name			    	as userName,
				user_gender					as userGender,
				user_birthday 				as userBirthday,
				user_email					as userEmail,
				user_tel				    as userTel,
				user_created_date		    as CreatedDate,
				user_updated_date 			as UpdatedDate,
				user_start_time				as StartTime,
				user_end_time	    		as EndTime,
				class_attendance_date		as classAttDate,
				program_no					as programNo,
				program_name				as programName
			
		from	(
			select
				row_number() over(order by A.user_no desc) row_numbers,
				A.user_no,
				A.user_id,
				A.user_name,
				A.user_gender,
				A.user_birthday,
				A.user_email,
				A.user_tel,
				A.user_created_date,
				A.user_updated_date,
				B.user_start_time,
				B.user_end_time,
				C.class_attendance_date,
				C.program_no,
				D.program_name		
			from 
				users A, user_attendances B, user_class_attendances C , fitness_programs D
			where
				A.user_no = B.user_no
				and A.user_no = B.user_no
				and C.program_no = D.program_no
				
			)
			
			where
				row_numbers between #{begin} and #{end}
	</select>
	
	<select id="getTotalRows" resultType="int">
		select
			count(*)
		from
			users
		where
			user_deleted = 'N'
	</select>
	
	<select id="getPrograms" parameterType="map" resultType="FitnessProgramCategory">
		select
    		fitness_program_category_no as categoryNo,
    		fitness_program_category_name as categoryName
		from
   			 fitness_program_category
	</select>

</mapper>